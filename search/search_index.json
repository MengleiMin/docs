{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my docs","title":"Home"},{"location":"#welcome-to-my-docs","text":"","title":"Welcome to my docs"},{"location":"english/","text":"If I understand this correctly May I ask xxx? Feel free to comment here if you have any opinions on this already! I would like to check with you that I have understood correctly regarding the upstream integration (API), Say good by to employees who will leave: I wish you all the best in your future endeavors. When asked if everyone have talked in stand up meeting: Have you gone? May I ask xxx ? I am happy about that. xxx, Would you like to go next? this was pretty much things I would like to share with you (end of presentation) Please interrupt me if you have any questions (when presentation) As far as I understood, xxxx As I understood, xxx Feel free to come with feedback or let me know if you see an typos Sorry I'm a Jade noob, but if I understand you both correctly. Is the alternatives: I assume some dependency in my service is wrongful, would like to find the cause myself. Any tips on what to look for? For xxx, we are opting to xxx, do you see any issues? no worries at all. we all do our best Yes it is, but since I am only using it inside IrisRequestMapper at the moment, I decided to define it locally for now. I consider your suggestion in mind if there are more use cases in the project For slack communication Super catch The detail that makes all the difference","title":"English"},{"location":"english/#for-slack-communication","text":"Super catch The detail that makes all the difference","title":"For slack communication"},{"location":"git/","text":"Git commands When want to change the commit, use amend command. git status git add . git commit --amend -m \"Your comment\" git push origin HEAD -f When want to squach last N commits, use squash command. git rebase -i HEAD~N Choose the commits that you want to squach, and put squash command at the beginning of the commits. For example, the last 4 commits below will be squashed into first commit 01d1124 . pick 01d1124 commit 1. squash 6340aaa commit 2. squash ebfd367 commit 3. squash 30e0ccb commit 4. Once this is done and saved, another editor pops up, you can also edit the commit message there if you want to. Save and exit, use the following command to push the squached commit. git push origin HEAD -f Jump back to the last commit using a commit-id and push it to the remote branch. git reset --hard f145f6f git push origin -f Undo the last commit git reset --soft HEAD~1 If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes anymore. git reset --hard HEAD~1 Remove the merge just now git fetch origin git reset --hard origin git reverte git checkout master git pull --rebase origin master git checkout -b revert_pull_request_1 git revert -m 1 merged-commit-id git push origin revert_pull_request_1 Create branch git pull git checkout -branch branchName git push origin branchName Delete branch from local and remote git branch -delete branchName git push origin --delete branchName Resolve Conflicts Step 1 . Checkout the source branch and merge in the changes from the target branch. git merge --abort (If exist uncommited files) git checkout feature/branchName git pull origin master Step 2 . After the merge conflicts are resolved, stage the changes accordingly, commit the changes and push. git commit git push origin HEAD Rename remote branch Step 1a . Rename your local branch. If you are on the branch you want to rename: git branch -m new-name Step 1b . If you are on a different branch: git branch -m old-name new-name Step 2 . Delete the old-name remote branch and push the new-name local branch. git push origin :old-name new-name Step 3 . Reset the upstream branch for the new-name local branch. git push origin -u new-name Remove the last commit git reset --hard HEAD^ git push origin -f Git short command Show commit history git reflog Show graphical history viewer gitk","title":"Git"},{"location":"git/#git-commands","text":"When want to change the commit, use amend command. git status git add . git commit --amend -m \"Your comment\" git push origin HEAD -f When want to squach last N commits, use squash command. git rebase -i HEAD~N Choose the commits that you want to squach, and put squash command at the beginning of the commits. For example, the last 4 commits below will be squashed into first commit 01d1124 . pick 01d1124 commit 1. squash 6340aaa commit 2. squash ebfd367 commit 3. squash 30e0ccb commit 4. Once this is done and saved, another editor pops up, you can also edit the commit message there if you want to. Save and exit, use the following command to push the squached commit. git push origin HEAD -f Jump back to the last commit using a commit-id and push it to the remote branch. git reset --hard f145f6f git push origin -f Undo the last commit git reset --soft HEAD~1 If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes anymore. git reset --hard HEAD~1 Remove the merge just now git fetch origin git reset --hard origin git reverte git checkout master git pull --rebase origin master git checkout -b revert_pull_request_1 git revert -m 1 merged-commit-id git push origin revert_pull_request_1 Create branch git pull git checkout -branch branchName git push origin branchName Delete branch from local and remote git branch -delete branchName git push origin --delete branchName Resolve Conflicts Step 1 . Checkout the source branch and merge in the changes from the target branch. git merge --abort (If exist uncommited files) git checkout feature/branchName git pull origin master Step 2 . After the merge conflicts are resolved, stage the changes accordingly, commit the changes and push. git commit git push origin HEAD Rename remote branch Step 1a . Rename your local branch. If you are on the branch you want to rename: git branch -m new-name Step 1b . If you are on a different branch: git branch -m old-name new-name Step 2 . Delete the old-name remote branch and push the new-name local branch. git push origin :old-name new-name Step 3 . Reset the upstream branch for the new-name local branch. git push origin -u new-name Remove the last commit git reset --hard HEAD^ git push origin -f","title":"Git commands"},{"location":"git/#git-short-command","text":"Show commit history git reflog Show graphical history viewer gitk","title":"Git short command"},{"location":"intellij/","text":"Intellij shoutcuts Choose a block selection shift+cmd+8 Create Test cmd+shift+T Find in path cmd+shift+f Find action dialog cmd+shift+A Actions: Extract method Hierarchy actions New scratch file cmd+shift+N Format JSON in a scratch file cmd+shift+option+L Sublime shoutcuts Json in sublime cmd+control+j","title":"Intellij"},{"location":"intellij/#intellij-shoutcuts","text":"Choose a block selection shift+cmd+8 Create Test cmd+shift+T Find in path cmd+shift+f Find action dialog cmd+shift+A Actions: Extract method Hierarchy actions New scratch file cmd+shift+N Format JSON in a scratch file cmd+shift+option+L","title":"Intellij shoutcuts"},{"location":"intellij/#sublime-shoutcuts","text":"Json in sublime cmd+control+j","title":"Sublime shoutcuts"},{"location":"java/","text":"Sets Implement containsAny for sets command. Sets.intersection(set1, set2).isEmpty() CollectionUtils.containsAny(someCollection1, someCollection2) setA.stream().anyMatch(setB::contains) ## Optional - !getData(input).isPresent() - getData(input).isEmpty() ``` / When result is null, return 0L / private long getA(Optional response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .orElse(0L); } - / When result is null, return result / private long getA(Optional response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .get(); } ``` ``` / Return the result which A.getB() >= b and sort it out as ascending order / private long getC(Object A) { return A.stream() .filter(A -> A.getB() >= b) .max(Comparator.comparing(A::getC())) .map(A::getC()) .orElse(0L); } ``` ``` Boolean/boolean result = (response) -> Optional.ofNullable(response) .map(r -> r.b) .map(b -> b.c) .isPresent()) ``` ``` /* When several functions have common parts, can extract the common method (parseValueFromA) for them */ private Long parseValueFromA(Optional response,Function function) { return response .map(function) .orElse(null); } Long B = parseValueFromA(response, QueryResponse -> QueryResponse.B); Long C = parseValueFromA(response, QueryResponse -> QueryResponse.C); ``` Data fetching handling Solution 1 A.getB().getC() Solution 2 Optional.ofNullable(A) .map(A::getB()) .map(B::getC()) .orElseThrow(() -> new RuntimeException(\"C is not present!\")); Tips if - else if(x==y) { return a; } else { return b } can be simpified as: x == y ? a : b if - else if - else If the conditions are not based on the same thing, for example: if (condition A) { ... } if (condition B) { ... } If the conditions is based on the same thing, then: if (a > 1) { ... } else if (a == 0) { ... } else { ... } if-else VS switch > For a switch statement, the default clause is good for error handling and testing (even it is not necessary). If it doesn't need the default clause, then if - else can be considered instead. static final VS final static > static final and final static are the same. However static final is recommended by coding convention. ## Regexp/ restrction annotation #### Integer @Positive and @PositiveOrZero @Min(100) and @Max(100) @Range(min = 1000, max = 3000) #### String @NotEmpty // String is not empty @NotNull // String is not Null @Size(max = 100) // length of String @Pattern(regexp = \"(^[1-9]$)|(^0[1-9]|1[0-2]$)\") // 1 - 12, include 01, 02 @Pattern(regexp = \"^\\d{4}$\") // Four digits @Pattern(regexp = \"[A-Z]{3}\") // The three character ISO 4217 currency code #### LocalDate @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd\") ## Annotations @Data @EqualsAndHashCode(callSuper = true) // @EqualsAndHashCode is included in @Data, and the default value of callSuper is false. @AvroIgnore ## Functions - Boolean.equals(Object obj) Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object. Objects.isNull(Object A) This method is used to check if object is null or not, it doesn't check empty. ObjectUtils.allNotNull(Object A, Object B,....) This method is used to check if all object are not null, it doesn't check empty. StringUtils.isEmpty() This method is used to check if a String object is null or empty . org.springframework.util.CollectionUtils.isEmpty(Object A) This method is used to check if a object is null or empty . LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) To format the date. Long.MAX_VALUE Get the maximum value of Long.","title":"Java"},{"location":"java/#sets","text":"Implement containsAny for sets command. Sets.intersection(set1, set2).isEmpty() CollectionUtils.containsAny(someCollection1, someCollection2) setA.stream().anyMatch(setB::contains) ## Optional - !getData(input).isPresent() - getData(input).isEmpty() ``` / When result is null, return 0L / private long getA(Optional response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .orElse(0L); } - / When result is null, return result / private long getA(Optional response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .get(); } ``` ``` / Return the result which A.getB() >= b and sort it out as ascending order / private long getC(Object A) { return A.stream() .filter(A -> A.getB() >= b) .max(Comparator.comparing(A::getC())) .map(A::getC()) .orElse(0L); } ``` ``` Boolean/boolean result = (response) -> Optional.ofNullable(response) .map(r -> r.b) .map(b -> b.c) .isPresent()) ``` ``` /* When several functions have common parts, can extract the common method (parseValueFromA) for them */ private Long parseValueFromA(Optional response,Function function) { return response .map(function) .orElse(null); } Long B = parseValueFromA(response, QueryResponse -> QueryResponse.B); Long C = parseValueFromA(response, QueryResponse -> QueryResponse.C); ```","title":"Sets"},{"location":"java/#data-fetching-handling","text":"Solution 1 A.getB().getC() Solution 2 Optional.ofNullable(A) .map(A::getB()) .map(B::getC()) .orElseThrow(() -> new RuntimeException(\"C is not present!\"));","title":"Data fetching handling"},{"location":"java/#tips","text":"if - else if(x==y) { return a; } else { return b } can be simpified as: x == y ? a : b if - else if - else If the conditions are not based on the same thing, for example: if (condition A) { ... } if (condition B) { ... } If the conditions is based on the same thing, then: if (a > 1) { ... } else if (a == 0) { ... } else { ... } if-else VS switch > For a switch statement, the default clause is good for error handling and testing (even it is not necessary). If it doesn't need the default clause, then if - else can be considered instead. static final VS final static > static final and final static are the same. However static final is recommended by coding convention. ## Regexp/ restrction annotation #### Integer @Positive and @PositiveOrZero @Min(100) and @Max(100) @Range(min = 1000, max = 3000) #### String @NotEmpty // String is not empty @NotNull // String is not Null @Size(max = 100) // length of String @Pattern(regexp = \"(^[1-9]$)|(^0[1-9]|1[0-2]$)\") // 1 - 12, include 01, 02 @Pattern(regexp = \"^\\d{4}$\") // Four digits @Pattern(regexp = \"[A-Z]{3}\") // The three character ISO 4217 currency code #### LocalDate @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd\") ## Annotations @Data @EqualsAndHashCode(callSuper = true) // @EqualsAndHashCode is included in @Data, and the default value of callSuper is false. @AvroIgnore ## Functions - Boolean.equals(Object obj) Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object. Objects.isNull(Object A) This method is used to check if object is null or not, it doesn't check empty. ObjectUtils.allNotNull(Object A, Object B,....) This method is used to check if all object are not null, it doesn't check empty. StringUtils.isEmpty() This method is used to check if a String object is null or empty . org.springframework.util.CollectionUtils.isEmpty(Object A) This method is used to check if a object is null or empty . LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) To format the date. Long.MAX_VALUE Get the maximum value of Long.","title":"Tips"},{"location":"markdown/","text":"Get Started Welcome to Boostnote :) This is a page for you to play around with. \ud83d\udc68\u200d\ud83d\udcbb Markdown Cheat Sheet \ud83d\udc69\u200d\ud83d\udcbb 1\ufe0f\u20e3 Headings Heading 1 # H1 Heading 2 ## H2 Heading 3 ### H3 Heading 4 #### H4 Heading 5 ##### H5 Heading 6 ###### H6 2\ufe0f\u20e3 Text Decoration Bold **bold** Italic *italicized text* Line Through ~~line through~~ 3\ufe0f\u20e3 List Ordered List 1. First Item 2. Second Item 3. Third Item Unordered List * First Item * Second Item * Third Item 4\ufe0f\u20e3 Code Decoration Code code Code Block <title>Hello World!</title> <link rel=\"stylesheet\" href=\"style.css\"> 5\ufe0f\u20e3 Others Checkbox * [x] First Item * [ ] Second item Horizontal Rule --- Link [Boostnote](https://boostnote.io/) Quote > This is a quote from somewhere!","title":"Markdown"},{"location":"markdown/#get-started","text":"Welcome to Boostnote :) This is a page for you to play around with.","title":"Get Started"},{"location":"markdown/#markdown-cheat-sheet","text":"","title":"\ud83d\udc68\u200d\ud83d\udcbb Markdown Cheat Sheet \ud83d\udc69\u200d\ud83d\udcbb"},{"location":"markdown/#1-headings","text":"","title":"1\ufe0f\u20e3 Headings"},{"location":"markdown/#heading-1","text":"# H1","title":"Heading 1"},{"location":"markdown/#heading-2","text":"## H2","title":"Heading 2"},{"location":"markdown/#heading-3","text":"### H3","title":"Heading 3"},{"location":"markdown/#heading-4","text":"#### H4","title":"Heading 4"},{"location":"markdown/#heading-5","text":"##### H5","title":"Heading 5"},{"location":"markdown/#heading-6","text":"###### H6","title":"Heading 6"},{"location":"markdown/#2-text-decoration","text":"","title":"2\ufe0f\u20e3 Text Decoration"},{"location":"markdown/#bold","text":"**bold**","title":"Bold"},{"location":"markdown/#italic","text":"*italicized text*","title":"Italic"},{"location":"markdown/#line-through","text":"~~line through~~","title":"Line Through"},{"location":"markdown/#3-list","text":"","title":"3\ufe0f\u20e3 List"},{"location":"markdown/#ordered-list","text":"1. First Item 2. Second Item 3. Third Item","title":"Ordered List"},{"location":"markdown/#unordered-list","text":"* First Item * Second Item * Third Item","title":"Unordered List"},{"location":"markdown/#4-code-decoration","text":"","title":"4\ufe0f\u20e3 Code Decoration"},{"location":"markdown/#code","text":"code","title":"Code"},{"location":"markdown/#code-block","text":"<title>Hello World!</title> <link rel=\"stylesheet\" href=\"style.css\">","title":"Code Block"},{"location":"markdown/#5-others","text":"","title":"5\ufe0f\u20e3 Others"},{"location":"markdown/#checkbox","text":"* [x] First Item * [ ] Second item","title":"Checkbox"},{"location":"markdown/#horizontal-rule","text":"---","title":"Horizontal Rule"},{"location":"markdown/#link","text":"[Boostnote](https://boostnote.io/)","title":"Link"},{"location":"markdown/#quote","text":"> This is a quote from somewhere!","title":"Quote"},{"location":"spring-boot/","text":"Welcome to Spring Boot \u5165\u95e8 Spring \u67b6\u6784 Spring \u6574\u4f53\u67b6\u6784\u56fe AOP (Aspect Oriented Programming) \u9762\u5411\u5207\u9762\u7f16\u7a0b\uff0c\u901a\u8fc7\u9884\u7f16\u8bd1\u65b9\u5f0f\u548c\u8fd0\u884c\u671f\u95f4\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u7684\u7edf\u4e00\u7ef4\u62a4\u7684\u4e00\u79cd\u6280\u672f\u3002 AOP\u662fOOP\u7684\u5ef6\u7eed\uff0c\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u70ed\u70b9\uff0c\u4e5f\u662fSpring\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5185\u5bb9\uff0c\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e00\u79cd\u884d\u751f\u8303\u578b\u3002 Core Container \u5c0f\u77e5\u8bc6: * IoC, Inversion of Control, \u63a7\u5236\u53cd\u8f6c IoC\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e0eDI\u7684\u5173\u7cfb\uff1f - \u4f9d\u8d56\u67e5\u627e(Dependency Lookup)\uff1a\u5bb9\u5668\u4e2d\u7684\u53d7\u63a7\u5bf9\u8c61\u901a\u8fc7\u5bb9\u5668\u7684API\u6765\u67e5\u627e\u81ea\u5df1\u6240\u4f9d\u8d56\u7684\u8d44\u6e90\u548c\u534f\u4f5c\u5bf9\u8c61\u3002\u8fd9\u79cd\u65b9\u5f0f\u867d\u7136\u964d\u4f4e\u4e86\u5bf9\u8c61\u95f4\u7684\u4f9d\u8d56\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u4f7f\u7528\u5230\u4e86\u5bb9\u5668\u7684API\uff0c\u9020\u6210\u4e86\u6211\u4eec\u65e0\u6cd5\u5728\u5bb9\u5668\u5916\u4f7f\u7528\u548c\u6d4b\u8bd5\u5bf9\u8c61\u3002\u4f9d\u8d56\u67e5\u627e\u662f\u4e00\u79cd\u66f4\u52a0\u4f20\u7edf\u7684IoC\u5b9e\u73b0\u65b9\u5f0f\u3002 - \u4f9d\u8d56\u6ce8\u5165(Dependency Injection)\uff1a\u8fd9\u5c31\u662fDI\uff0c\u5b57\u9762\u4e0a\u7406\u89e3\uff0c\u4f9d\u8d56\u6ce8\u5165\u5c31\u662f\u5c06\u670d\u52a1\u6ce8\u5165\u5230\u4f7f\u7528\u5b83\u7684\u5730\u65b9\u3002\u5bf9\u8c61\u53ea\u63d0\u4f9b\u666e\u901a\u7684\u65b9\u6cd5\u8ba9\u5bb9\u5668\u53bb\u51b3\u5b9a\u4f9d\u8d56\u5173\u7cfb\uff0c\u5bb9\u5668\u5168\u6743\u8d1f\u8d23\u7ec4\u4ef6\u7684\u88c5\u914d\uff0c\u5b83\u4f1a\u628a\u7b26\u5408\u4f9d\u8d56\u5173\u7cfb\u7684\u5bf9\u8c61\u901a\u8fc7\u5c5e\u6027\uff08JavaBean\u4e2d\u7684setter\uff09\u6216\u8005\u662f\u6784\u9020\u5b50\u4f20\u9012\u7ed9\u9700\u8981\u7684\u5bf9\u8c61\u3002\u76f8\u5bf9\u4e8eIoC\u800c\u8a00\uff0c\u4f9d\u8d56\u6ce8\u5165(DI)\u66f4\u52a0\u51c6\u786e\u5730\u63cf\u8ff0\u4e86IoC\u7684\u8bbe\u8ba1\u7406\u5ff5\u3002\u6240\u8c13\u4f9d\u8d56\u6ce8\u5165\uff0c\u5373\u7ec4\u4ef6\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u7531\u5bb9\u5668\u5728\u5e94\u7528\u7cfb\u7edf\u8fd0\u884c\u671f\u6765\u51b3\u5b9a\uff0c\u4e5f\u5c31\u662f\u7531\u5bb9\u5668\u52a8\u6001\u5730\u5c06\u67d0\u79cd\u4f9d\u8d56\u5173\u7cfb\u7684\u76ee\u6807\u5bf9\u8c61\u5b9e\u4f8b\u6ce8\u5165\u5230\u5e94\u7528\u7cfb\u7edf\u4e2d\u7684\u5404\u4e2a\u5173\u8054\u7684\u7ec4\u4ef6\u4e4b\u4e2d\u3002 - IoC\u662fSpring\u7684\u6838\u5fc3\uff0c\u8d2f\u7a7f\u59cb\u7ec8\u3002\u5bf9\u4e8eSpring\u6846\u67b6\u6765\u8bf4\uff0c\u5c31\u662f\u7531Spring\u6765\u8d1f\u8d23\u63a7\u5236\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u5bf9\u8c61\u95f4\u7684\u5173\u7cfb\u3002 Spring\u4e2dDI\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f---Setter\u65b9\u5f0f(\u4f20\u503c\u65b9\u5f0f)\u548c\u6784\u9020\u5668\u65b9\u5f0f(\u5f15\u7528\u65b9\u5f0f)\u3002","title":"Spring Boot"},{"location":"spring-boot/#welcome-to-spring-boot","text":"","title":"Welcome to Spring Boot \u5165\u95e8"},{"location":"spring-boot/#spring","text":"Spring \u6574\u4f53\u67b6\u6784\u56fe AOP (Aspect Oriented Programming) \u9762\u5411\u5207\u9762\u7f16\u7a0b\uff0c\u901a\u8fc7\u9884\u7f16\u8bd1\u65b9\u5f0f\u548c\u8fd0\u884c\u671f\u95f4\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u7684\u7edf\u4e00\u7ef4\u62a4\u7684\u4e00\u79cd\u6280\u672f\u3002 AOP\u662fOOP\u7684\u5ef6\u7eed\uff0c\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u70ed\u70b9\uff0c\u4e5f\u662fSpring\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5185\u5bb9\uff0c\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e00\u79cd\u884d\u751f\u8303\u578b\u3002 Core Container \u5c0f\u77e5\u8bc6: * IoC, Inversion of Control, \u63a7\u5236\u53cd\u8f6c IoC\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e0eDI\u7684\u5173\u7cfb\uff1f - \u4f9d\u8d56\u67e5\u627e(Dependency Lookup)\uff1a\u5bb9\u5668\u4e2d\u7684\u53d7\u63a7\u5bf9\u8c61\u901a\u8fc7\u5bb9\u5668\u7684API\u6765\u67e5\u627e\u81ea\u5df1\u6240\u4f9d\u8d56\u7684\u8d44\u6e90\u548c\u534f\u4f5c\u5bf9\u8c61\u3002\u8fd9\u79cd\u65b9\u5f0f\u867d\u7136\u964d\u4f4e\u4e86\u5bf9\u8c61\u95f4\u7684\u4f9d\u8d56\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u4f7f\u7528\u5230\u4e86\u5bb9\u5668\u7684API\uff0c\u9020\u6210\u4e86\u6211\u4eec\u65e0\u6cd5\u5728\u5bb9\u5668\u5916\u4f7f\u7528\u548c\u6d4b\u8bd5\u5bf9\u8c61\u3002\u4f9d\u8d56\u67e5\u627e\u662f\u4e00\u79cd\u66f4\u52a0\u4f20\u7edf\u7684IoC\u5b9e\u73b0\u65b9\u5f0f\u3002 - \u4f9d\u8d56\u6ce8\u5165(Dependency Injection)\uff1a\u8fd9\u5c31\u662fDI\uff0c\u5b57\u9762\u4e0a\u7406\u89e3\uff0c\u4f9d\u8d56\u6ce8\u5165\u5c31\u662f\u5c06\u670d\u52a1\u6ce8\u5165\u5230\u4f7f\u7528\u5b83\u7684\u5730\u65b9\u3002\u5bf9\u8c61\u53ea\u63d0\u4f9b\u666e\u901a\u7684\u65b9\u6cd5\u8ba9\u5bb9\u5668\u53bb\u51b3\u5b9a\u4f9d\u8d56\u5173\u7cfb\uff0c\u5bb9\u5668\u5168\u6743\u8d1f\u8d23\u7ec4\u4ef6\u7684\u88c5\u914d\uff0c\u5b83\u4f1a\u628a\u7b26\u5408\u4f9d\u8d56\u5173\u7cfb\u7684\u5bf9\u8c61\u901a\u8fc7\u5c5e\u6027\uff08JavaBean\u4e2d\u7684setter\uff09\u6216\u8005\u662f\u6784\u9020\u5b50\u4f20\u9012\u7ed9\u9700\u8981\u7684\u5bf9\u8c61\u3002\u76f8\u5bf9\u4e8eIoC\u800c\u8a00\uff0c\u4f9d\u8d56\u6ce8\u5165(DI)\u66f4\u52a0\u51c6\u786e\u5730\u63cf\u8ff0\u4e86IoC\u7684\u8bbe\u8ba1\u7406\u5ff5\u3002\u6240\u8c13\u4f9d\u8d56\u6ce8\u5165\uff0c\u5373\u7ec4\u4ef6\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u7531\u5bb9\u5668\u5728\u5e94\u7528\u7cfb\u7edf\u8fd0\u884c\u671f\u6765\u51b3\u5b9a\uff0c\u4e5f\u5c31\u662f\u7531\u5bb9\u5668\u52a8\u6001\u5730\u5c06\u67d0\u79cd\u4f9d\u8d56\u5173\u7cfb\u7684\u76ee\u6807\u5bf9\u8c61\u5b9e\u4f8b\u6ce8\u5165\u5230\u5e94\u7528\u7cfb\u7edf\u4e2d\u7684\u5404\u4e2a\u5173\u8054\u7684\u7ec4\u4ef6\u4e4b\u4e2d\u3002 - IoC\u662fSpring\u7684\u6838\u5fc3\uff0c\u8d2f\u7a7f\u59cb\u7ec8\u3002\u5bf9\u4e8eSpring\u6846\u67b6\u6765\u8bf4\uff0c\u5c31\u662f\u7531Spring\u6765\u8d1f\u8d23\u63a7\u5236\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u5bf9\u8c61\u95f4\u7684\u5173\u7cfb\u3002 Spring\u4e2dDI\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f---Setter\u65b9\u5f0f(\u4f20\u503c\u65b9\u5f0f)\u548c\u6784\u9020\u5668\u65b9\u5f0f(\u5f15\u7528\u65b9\u5f0f)\u3002","title":"Spring \u67b6\u6784"},{"location":"swedish/","text":"fras \u00e4n s\u00e5 l\u00e4nge: so far","title":"Swedish"},{"location":"swedish/#fras","text":"\u00e4n s\u00e5 l\u00e4nge: so far","title":"fras"}]}