{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Molly's note For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Deploy changes mkdocs -h - Print help message and exit.","title":"Home"},{"location":"#welcome-to-mollys-note","text":"For full documentation visit mkdocs.org .","title":"Welcome to Molly's note"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Deploy changes mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"Kafka/","text":"Welcome to Molly's note For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Deploy changes mkdocs -h - Print help message and exit.","title":"Kafka"},{"location":"Kafka/#welcome-to-mollys-note","text":"For full documentation visit mkdocs.org .","title":"Welcome to Molly's note"},{"location":"Kafka/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Deploy changes mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"english/","text":"Abbreviation Doh \"Doh\" is now defined as \"Expressing frustration at the realization that things have turned out badly or not as planned, or that one has just said or done something foolish\" Work communication If I understand this correctly May I ask xxx? Feel free to comment here if you have any opinions on this already! I would like to check with you that I have understood correctly regarding the upstream integration (API), Say good by to employees who will leave: I wish you all the best in your future endeavors. When asked if everyone have talked in stand up meeting: Have you gone? May I ask xxx ? I am happy about that. xxx, Would you like to go next? this was pretty much things I would like to share with you (end of presentation) Please interrupt me if you have any questions (when presentation) As far as I understood, xxxx As I understood, xxx Feel free to come with feedback or let me know if you see any typos Sorry I'm a Jade noob, but if I understand you both correctly. Is the alternatives: I assume some dependency in my service is wrongful, would like to find the cause myself. Any tips on what to look for? For xxx, we are opting to xxx, do you see any issues? no worries at all. we all do our best Yes it is, but since I am only using it inside xxx at the moment, I decided to define it locally for now. I consider your suggestion in mind if there are more use cases in the project For slack communication Super catch The detail that makes all the difference Gotcha Phrase \u591a\u4e48\u901a\u60c5\u8fbe\u7406=how very convenient \u6253\u86cb\u5668=eggbeater \u73b0\u5728\u5f00\u59cb\u5403\u5427 = Very to eat what a bargain: \u592a\u5212\u7b97\u4e86 Out of budget/price range :\u8d85\u51fa\u9884\u7b97 be held up: \u88ab\u4ec0\u4e48\u963b\u788d/\u62d6\u7740\uff0cI am held up at/by work. means - I cannot get off of work, because I am working on something. Be held up by traffic. crazy expensive. get each other hard time\uff1a\u5201\u96be\u5bf9\u65b9 don\u2019t brag about it: \u522b\u5439\u725b\u4e86 grass is always greener in the other side\uff1a \u90bb\u5bb6\u82b3\u8349\u7eff day after day\uff1a \u65e5\u590d\u4e00\u65e5 Anything on special today? = Anything on sale today? Could you put the strawberries in a separate bag?\u4f60\u80fd\u628a\u8349\u8393\u5355\u72ec\u653e\u5728\u4e00\u4e2a\u888b\u5b50\u91cc\u5417\uff1f Believes can be deep seated= \u76f8\u4fe1\u53ef\u4ee5\u6df1\u5165\u4eba\u5fc3 Digging into complex problems: \u6df1\u5165\u7814\u7a76\u590d\u6742\u95ee\u9898 travel oversea\uff1a\u53bb\u56fd\u5916\u65c5\u6e38 I could really use or I could use something = I really want/want Well listen, I'm going to go mingle a bit=\u7528\u4e8e\uff08\u6bd4\u5982party\uff09\u7ed3\u675f\u5bf9\u8bdd\uff0c\u6211\u5c06\u53bb\u548c\u522b\u4eba\u793e\u4ea4\u4e00\u4e0b\uff0cyou want to end the conversation - so that you can talk to other people as well. policies are always gonna have certain restrictions. sing by the fire\uff1a\u56f4\u7740\u7bdd\u706b\u5531\u6b4c \u60f3\u8981\u4e1c\u897f\u7684\u6492\u5a07\uff1astop being so whiny = stop whining \u522b\u6492\u5a07\u4e86 \u60c5\u4fa3\u4e4b\u95f4\u7684\u53e3\u543b\u6492\u5a07\uff1athe lovely-dovey stuff it's gross\uff1a\u592a\u6076\u5fc3\u4e86 Issue resolution meeting: \u95ee\u9898\u89e3\u51b3\u4f1a\u8bae in a sneaky and secretive way\uff1a\u9b3c\u9b3c\u795f\u795f\uff0c\u5077\u5077\u6478\u6478 i am sold: \u6211\u88ab\u8bf4\u670d\u4e86 I am in a pickle: \u6211\u5f88\u77db\u76fe\uff0c\u6211\u5f88\u7ea0\u7ed3 Word Stink: smells bad Honeypot: \u6781\u5177\u5438\u5f15\u529b\u7684\u4e8b\u7269\uff0c\u871c\u7f50 unwritten rule: \u4e0d\u6210\u6587\u7684\u89c4\u5219 Bun: \u5c0f\u5706\u9762\u5305 embryo\uff1a\u53d7\u7cbe\u5375 Overwhelming majority: \u5927\u90e8\u5206\u5927\u90e8\u5206\uff0c\u6bd4\u598290%\u4ee5\u4e0a Paraben: \u9632\u8150\u5242 Slap:\u7529\u5df4\u638c Whooping cough \uff1a flu shot: Chromosome abnormality:\u67d3\u8272\u4f53\u5f02\u5e38 after-treatment controllers: \u540e\u5904\u7406\u63a7\u5236\u5668 countershaft\uff1a\u5bf9\u8f6c\u8f74 Hazards: \u5371\u5bb3 roast\uff1a\u5584\u610f\u7684\u5632\u5f04\u67d0\u4eba good natured jokes\uff1a\u5584\u610f\u7684\u73a9\u7b11 Public Display of Affection (PDA)\uff1a\u79c0\u6069\u7231 love birds\uff1a\u70ed\u70c8\u4e2d\u7684\u60c5\u4fa3 Cradle-snatcher\uff1a\u59d0\u5f1f\u604b best man/groomsmen\uff1a\u4f34\u90ce bridesmaids\uff1a\u4f34\u5a18 matchmaker\uff1a\u5a92\u5a46 go on honeymoon\uff1a \u53bb\u5ea6\u871c\u6708 Intercom: \u5bf9\u8bb2\u673a homecoming\uff1a\u5f52\u56fd\uff0c\u540c\u5b66\u4f1a portfolio\uff1a\u4f5c\u54c1 thriller\uff1a\u60ca\u609a\u7247 opaque\u4e0d\u900f\u660e\u7684 chaos\uff1a\u6ce8\u97f3\u8bfb\u97f3 plastic wrap\uff0cfood wrap\uff0ccling film\uff1a\u4fdd\u9c9c\u819c dismay\uff1a\u4f7f\u7070\u5fc3\uff0c\u4f7f\u6cae\u4e27 executive presence\uff1a\u9ad8\u7ba1\u5f62\u8c61\uff0c\u9886\u5bfc\u8005\u6c14\u8d28 diarrhea: \u8179\u6cfb\uff0c\u75e2\u75be self contradictory\uff1a \u81ea\u76f8\u77db\u76fe\u7684 an oxymoron = catch 22\u77db\u76fe\uff0c\u81ea\u76f8\u77db\u76fe son bias: \u91cd\u7537\u8f7b\u5973 Douchebag: \u4eba\u6e23\uff0c\u53d8\u6001 low key: \u4f4e\u8c03 down to earth\uff1a\u811a\u8e0f\u5b9e\u5730 frankly\uff1a to be honest Sideline: \u526f\u4e1a Music recital: \u97f3\u4e50\u6f14\u594f\u4f1a dial: \u8f6c\u76d8\uff0c\u523b\u5ea6\u76d8 shock hazard\uff1a\u7535\u51fb\u5371\u9669 hedgehog\uff1a\u523a\u732c Buttler\uff1a\u7537\u7ba1\u5bb6 saliva\uff1a\u553e\u6db2 Persian\uff1a\u6ce2\u65af\u7684 lame excuse\uff1a\u65e0\u8bf4\u670d\u529b\u7684\u501f\u53e3 gravy boat\uff1a\u8c03\u5473\u6c41\u74f6 renovations\uff1a\u88c5\u4fee","title":"English"},{"location":"english/#abbreviation","text":"Doh \"Doh\" is now defined as \"Expressing frustration at the realization that things have turned out badly or not as planned, or that one has just said or done something foolish\"","title":"Abbreviation"},{"location":"english/#work-communication","text":"If I understand this correctly May I ask xxx? Feel free to comment here if you have any opinions on this already! I would like to check with you that I have understood correctly regarding the upstream integration (API), Say good by to employees who will leave: I wish you all the best in your future endeavors. When asked if everyone have talked in stand up meeting: Have you gone? May I ask xxx ? I am happy about that. xxx, Would you like to go next? this was pretty much things I would like to share with you (end of presentation) Please interrupt me if you have any questions (when presentation) As far as I understood, xxxx As I understood, xxx Feel free to come with feedback or let me know if you see any typos Sorry I'm a Jade noob, but if I understand you both correctly. Is the alternatives: I assume some dependency in my service is wrongful, would like to find the cause myself. Any tips on what to look for? For xxx, we are opting to xxx, do you see any issues? no worries at all. we all do our best Yes it is, but since I am only using it inside xxx at the moment, I decided to define it locally for now. I consider your suggestion in mind if there are more use cases in the project","title":"Work communication"},{"location":"english/#for-slack-communication","text":"Super catch The detail that makes all the difference Gotcha","title":"For slack communication"},{"location":"english/#phrase","text":"\u591a\u4e48\u901a\u60c5\u8fbe\u7406=how very convenient \u6253\u86cb\u5668=eggbeater \u73b0\u5728\u5f00\u59cb\u5403\u5427 = Very to eat what a bargain: \u592a\u5212\u7b97\u4e86 Out of budget/price range :\u8d85\u51fa\u9884\u7b97 be held up: \u88ab\u4ec0\u4e48\u963b\u788d/\u62d6\u7740\uff0cI am held up at/by work. means - I cannot get off of work, because I am working on something. Be held up by traffic. crazy expensive. get each other hard time\uff1a\u5201\u96be\u5bf9\u65b9 don\u2019t brag about it: \u522b\u5439\u725b\u4e86 grass is always greener in the other side\uff1a \u90bb\u5bb6\u82b3\u8349\u7eff day after day\uff1a \u65e5\u590d\u4e00\u65e5 Anything on special today? = Anything on sale today? Could you put the strawberries in a separate bag?\u4f60\u80fd\u628a\u8349\u8393\u5355\u72ec\u653e\u5728\u4e00\u4e2a\u888b\u5b50\u91cc\u5417\uff1f Believes can be deep seated= \u76f8\u4fe1\u53ef\u4ee5\u6df1\u5165\u4eba\u5fc3 Digging into complex problems: \u6df1\u5165\u7814\u7a76\u590d\u6742\u95ee\u9898 travel oversea\uff1a\u53bb\u56fd\u5916\u65c5\u6e38 I could really use or I could use something = I really want/want Well listen, I'm going to go mingle a bit=\u7528\u4e8e\uff08\u6bd4\u5982party\uff09\u7ed3\u675f\u5bf9\u8bdd\uff0c\u6211\u5c06\u53bb\u548c\u522b\u4eba\u793e\u4ea4\u4e00\u4e0b\uff0cyou want to end the conversation - so that you can talk to other people as well. policies are always gonna have certain restrictions. sing by the fire\uff1a\u56f4\u7740\u7bdd\u706b\u5531\u6b4c \u60f3\u8981\u4e1c\u897f\u7684\u6492\u5a07\uff1astop being so whiny = stop whining \u522b\u6492\u5a07\u4e86 \u60c5\u4fa3\u4e4b\u95f4\u7684\u53e3\u543b\u6492\u5a07\uff1athe lovely-dovey stuff it's gross\uff1a\u592a\u6076\u5fc3\u4e86 Issue resolution meeting: \u95ee\u9898\u89e3\u51b3\u4f1a\u8bae in a sneaky and secretive way\uff1a\u9b3c\u9b3c\u795f\u795f\uff0c\u5077\u5077\u6478\u6478 i am sold: \u6211\u88ab\u8bf4\u670d\u4e86 I am in a pickle: \u6211\u5f88\u77db\u76fe\uff0c\u6211\u5f88\u7ea0\u7ed3","title":"Phrase"},{"location":"english/#word","text":"Stink: smells bad Honeypot: \u6781\u5177\u5438\u5f15\u529b\u7684\u4e8b\u7269\uff0c\u871c\u7f50 unwritten rule: \u4e0d\u6210\u6587\u7684\u89c4\u5219 Bun: \u5c0f\u5706\u9762\u5305 embryo\uff1a\u53d7\u7cbe\u5375 Overwhelming majority: \u5927\u90e8\u5206\u5927\u90e8\u5206\uff0c\u6bd4\u598290%\u4ee5\u4e0a Paraben: \u9632\u8150\u5242 Slap:\u7529\u5df4\u638c Whooping cough \uff1a flu shot: Chromosome abnormality:\u67d3\u8272\u4f53\u5f02\u5e38 after-treatment controllers: \u540e\u5904\u7406\u63a7\u5236\u5668 countershaft\uff1a\u5bf9\u8f6c\u8f74 Hazards: \u5371\u5bb3 roast\uff1a\u5584\u610f\u7684\u5632\u5f04\u67d0\u4eba good natured jokes\uff1a\u5584\u610f\u7684\u73a9\u7b11 Public Display of Affection (PDA)\uff1a\u79c0\u6069\u7231 love birds\uff1a\u70ed\u70c8\u4e2d\u7684\u60c5\u4fa3 Cradle-snatcher\uff1a\u59d0\u5f1f\u604b best man/groomsmen\uff1a\u4f34\u90ce bridesmaids\uff1a\u4f34\u5a18 matchmaker\uff1a\u5a92\u5a46 go on honeymoon\uff1a \u53bb\u5ea6\u871c\u6708 Intercom: \u5bf9\u8bb2\u673a homecoming\uff1a\u5f52\u56fd\uff0c\u540c\u5b66\u4f1a portfolio\uff1a\u4f5c\u54c1 thriller\uff1a\u60ca\u609a\u7247 opaque\u4e0d\u900f\u660e\u7684 chaos\uff1a\u6ce8\u97f3\u8bfb\u97f3 plastic wrap\uff0cfood wrap\uff0ccling film\uff1a\u4fdd\u9c9c\u819c dismay\uff1a\u4f7f\u7070\u5fc3\uff0c\u4f7f\u6cae\u4e27 executive presence\uff1a\u9ad8\u7ba1\u5f62\u8c61\uff0c\u9886\u5bfc\u8005\u6c14\u8d28 diarrhea: \u8179\u6cfb\uff0c\u75e2\u75be self contradictory\uff1a \u81ea\u76f8\u77db\u76fe\u7684 an oxymoron = catch 22\u77db\u76fe\uff0c\u81ea\u76f8\u77db\u76fe son bias: \u91cd\u7537\u8f7b\u5973 Douchebag: \u4eba\u6e23\uff0c\u53d8\u6001 low key: \u4f4e\u8c03 down to earth\uff1a\u811a\u8e0f\u5b9e\u5730 frankly\uff1a to be honest Sideline: \u526f\u4e1a Music recital: \u97f3\u4e50\u6f14\u594f\u4f1a dial: \u8f6c\u76d8\uff0c\u523b\u5ea6\u76d8 shock hazard\uff1a\u7535\u51fb\u5371\u9669 hedgehog\uff1a\u523a\u732c Buttler\uff1a\u7537\u7ba1\u5bb6 saliva\uff1a\u553e\u6db2 Persian\uff1a\u6ce2\u65af\u7684 lame excuse\uff1a\u65e0\u8bf4\u670d\u529b\u7684\u501f\u53e3 gravy boat\uff1a\u8c03\u5473\u6c41\u74f6 renovations\uff1a\u88c5\u4fee","title":"Word"},{"location":"git/","text":"Git commands When want to change the commit, use amend command. git status git add . git commit --amend -m \"Your comment\" git push origin HEAD -f When want to squach last N commits, use squash command. git rebase -i HEAD~N Choose the commits that you want to squach, and put squash command at the beginning of the commits. For example, the last 4 commits below will be squashed into first commit 01d1124 . pick/reword 01d1124 commit 1. fixme 6340aaa commit 2. fixme ebfd367 commit 3. fixme 30e0ccb commit 4. Once this is done and saved, another editor pops up, you can also edit the commit message there if you want to. Save and exit, use the following command to push the squached commit. git push origin HEAD -f Jump back to the last commit using a commit-id and push it to the remote branch. git reset --hard f145f6f git push origin -f Undo the last commit git reset --soft HEAD~1 If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes anymore. git reset --hard HEAD~1 Remove the merge just now git fetch origin git reset --hard origin git reverte git checkout master git pull --rebase origin master git checkout -b revert_pull_request_1 git revert -m 1 merged-commit-id git push origin revert_pull_request_1 Create branch git pull git checkout -branch branchName git push origin branchName Delete branch from local and remote git branch -delete branchName git push origin --delete branchName Resolve Conflicts Step 1 . Checkout the source branch and merge in the changes from the target branch. git merge --abort (If exist uncommited files) git checkout feature/branchName git pull origin master Step 2 . After the merge conflicts are resolved, stage the changes accordingly, commit the changes and push. git commit git push origin HEAD Rename remote branch Step 1a . Rename your local branch. If you are on the branch you want to rename: git branch -m new-name Step 1b . If you are on a different branch: git branch -m old-name new-name Step 2 . Delete the old-name remote branch and push the new-name local branch. git push origin :old-name new-name Step 3 . Reset the upstream branch for the new-name local branch. git push origin -u new-name Remove the last commit git reset --hard HEAD^ git push origin -f Output logs Output every log in one line git log --oneline Search by keywords git log --grep keywords Git short command Show commit history git reflog Show graphical history viewer gitk","title":"Git"},{"location":"git/#git-commands","text":"When want to change the commit, use amend command. git status git add . git commit --amend -m \"Your comment\" git push origin HEAD -f When want to squach last N commits, use squash command. git rebase -i HEAD~N Choose the commits that you want to squach, and put squash command at the beginning of the commits. For example, the last 4 commits below will be squashed into first commit 01d1124 . pick/reword 01d1124 commit 1. fixme 6340aaa commit 2. fixme ebfd367 commit 3. fixme 30e0ccb commit 4. Once this is done and saved, another editor pops up, you can also edit the commit message there if you want to. Save and exit, use the following command to push the squached commit. git push origin HEAD -f Jump back to the last commit using a commit-id and push it to the remote branch. git reset --hard f145f6f git push origin -f Undo the last commit git reset --soft HEAD~1 If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes anymore. git reset --hard HEAD~1 Remove the merge just now git fetch origin git reset --hard origin git reverte git checkout master git pull --rebase origin master git checkout -b revert_pull_request_1 git revert -m 1 merged-commit-id git push origin revert_pull_request_1 Create branch git pull git checkout -branch branchName git push origin branchName Delete branch from local and remote git branch -delete branchName git push origin --delete branchName Resolve Conflicts Step 1 . Checkout the source branch and merge in the changes from the target branch. git merge --abort (If exist uncommited files) git checkout feature/branchName git pull origin master Step 2 . After the merge conflicts are resolved, stage the changes accordingly, commit the changes and push. git commit git push origin HEAD Rename remote branch Step 1a . Rename your local branch. If you are on the branch you want to rename: git branch -m new-name Step 1b . If you are on a different branch: git branch -m old-name new-name Step 2 . Delete the old-name remote branch and push the new-name local branch. git push origin :old-name new-name Step 3 . Reset the upstream branch for the new-name local branch. git push origin -u new-name Remove the last commit git reset --hard HEAD^ git push origin -f Output logs Output every log in one line git log --oneline Search by keywords git log --grep keywords","title":"Git commands"},{"location":"git/#git-short-command","text":"Show commit history git reflog Show graphical history viewer gitk","title":"Git short command"},{"location":"intellij/","text":"Intellij shoutcuts Choose a block selection shift+cmd+8 Create Test cmd+shift+T Find in path cmd+shift+f Find action dialog cmd+shift+A Actions: Extract method Hierarchy actions New scratch file cmd+shift+N Format JSON in a scratch file cmd+shift+option+L Sublime shoutcuts Json in sublime cmd+control+j","title":"Intellij"},{"location":"intellij/#intellij-shoutcuts","text":"Choose a block selection shift+cmd+8 Create Test cmd+shift+T Find in path cmd+shift+f Find action dialog cmd+shift+A Actions: Extract method Hierarchy actions New scratch file cmd+shift+N Format JSON in a scratch file cmd+shift+option+L","title":"Intellij shoutcuts"},{"location":"intellij/#sublime-shoutcuts","text":"Json in sublime cmd+control+j","title":"Sublime shoutcuts"},{"location":"java/","text":"Optional getData(input).isPresent() getData(input).isEmpty() /* Return non-negative value, and when result is null, return 0L */ private long getA(Optional<QueryResponse> response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .orElse(0L); } /* Return non-negative value, when result is null, return result/null */ private long getA(Optional<QueryResponse> response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .get(); } /* Return the result which A.getB() >= b and sort it out as ascending order by C */ private long getC(Object A) { return A.stream() .filter(A -> A.getB() >= b) .max(Comparator.comparing(A::getC())) .map(A::getC()) .orElse(0L); Boolean/boolean result = (response) -> Optional.ofNullable(response) .map(r -> r.b) .map(b -> b.c) .isPresent()) /* When several functions have common parts, can extract the common method (parseValueFromA) for them */ private Long parseValueFromA(Optional<QueryResponse> response,Function<QueryResponse, Long> function) { return response .map(function) .orElse(null); } Long B = parseValueFromA(response, QueryResponse -> QueryResponse.B); Long C = parseValueFromA(response, QueryResponse -> QueryResponse.C); Sets / List Implement containsAny for sets. Sets.intersection(set1, set2).isEmpty() CollectionUtils.containsAny(someCollection1, someCollection2) setA.stream().anyMatch(setB::contains) Implement anyMatch for stream. a.stream().anyMatch(s -> b.trim().equalsIgnoreCase(s)) Converter to a set Set<String> orderedItems = orderedItemsSet.stream() .map(str -> str.replaceAll(\"\\\\s\",\"\")) .map(String::toLowerCase) .collect(Collectors.toSet()) Return empty list/value return empty list var orderLines = Optional.ofNullable(request.getStudents()) .map(Students::getStudents) .orElse(Collections.emptyList()) Return empty value var student = Optional.ofNullable(request.getStudent()).orElse(null) Validator Validate configuration of YAML file xxxx-config : settings : normal : - level1: 175_00 reward: 510 - level2: 350_00 reward: 530 high : - level1: 175_00 reward: 550 - level2: 350_00 reward: 580 userMppingList : DEFAULT : normal #Default is mandatory to be set USER12345 : high ========================================================================= @Override public boolean supports(@NotNull Class<?> clazz) { return XxxxConfiguration.class.isAssignableFrom(clazz); } @Override public void validate(@NotNull Object target, @NotNull Errors errors) { XxxxConfiguration config = (XxxxConfiguration) target; if (isNull(config.getSettings())) { errors.rejectValue(\"settings\", \"settings\", \"Setting is null\"); } else if (getUserMppingList() == null) { errors.rejectValue(\"userMppingList\", \"userMppingList\", \"userMppingList is null\"); } else if (!config.getSetting().containsKey(getUserMppingList().get(DEFAULT))) { errors.rejectValue(\"settings\", \"settings\", \"Default setting not defined\"); } } Assert Java also provides a second syntax for assertions that takes a string, which will be used to construct the AssertionError if one is thrown: public void setup() { Connection conn = getConnection(); // or assert conn != null; assert conn != null : \"Connection is null\"; } Exceptions message throw check def ex = thrown(IllegalArgumentException) ex.message == \"(java.lang.IllegalArgumentException: XXX) Data fetching handling Solution 1 A.getB().getC() Solution 2 Optional.ofNullable(A) .map(A::getB()) .map(B::getC()) .orElseThrow(() -> new RuntimeException(\"C is not present!\")); Regexp/ restrction annotation Integer @Positive and @PositiveOrZero @Min(100) and @Max(100) @Range(min = 1000, max = 3000) String @NotEmpty // String is not empty @NotNull // String is not Null @Size(max = 100) // length of String @Pattern(regexp = \"(^[1-9]$)|(^0[1-9]|1[0-2]$)\") // 1 - 12, include 01, 02 @Pattern(regexp = \"^\\d{4}$\") // Four digits @Pattern(regexp = \"[A-Z]{3}\") // The three character ISO 4217 currency code LocalDate @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd\") Annotations @Data @EqualsAndHashCode(callSuper = true) @EqualsAndHashCode is included in @Data, and the default value of callSuper is false. @AvroIgnore @EnableAutoConfiguration Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. When using @SpringBootApplication, the auto-configuration of the context is automatically enabled and adding this annotation has therefore no additional effect. It is generally recommended that you place @EnableAutoConfiguration (if you're not using @SpringBootApplication) in a root package so that all sub-packages and classes can be searched. Methods Boolean.equals(Object obj) Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object. Objects.isNull(Object A) This method is used to check if object is null or not, it doesn't check empty. ObjectUtils.allNotNull(Object A, Object B,....) This method is used to check if all object are not null, it doesn't check empty. StringUtils.isEmpty() This method is used to check if a String object is null or empty . String equals() always return boolean value This method compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object. Otherwise is false. booleanValue = Str1.equals(Str2) org.springframework.util.CollectionUtils.isEmpty(Object A) This method is used to check if a object is null or empty . LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) To format the date. Long.MAX_VALUE Get the maximum value of Long. Concepts final A final variable can only be initialized once, it always contains the same value. If a final variable holds a reference to an object, then the state of the object may be changed by operations on the object, but the variable will always refer to the same object. // A final class cannot be subclassed. public final class MyFinalClass {...} public class ThisIsWrong extends MyFinalClass {...} // forbidden // A final method cannot be overridden or hidden by subclasses public class Base { public void m1() {...} public final void m2() {...} public static void m3() {...} public static final void m4() {...} } public class Derived extends Base { public void m1() {...} // OK, overriding Base#m1() public void m2() {...} // forbidden public static void m3() {...} // OK, hiding Base#m3() public static void m4() {...} // forbidden } static In the Java programming language, the keyword static indicates that the particular member belongs to a type itself, rather than to an instance of that type. This means that only one instance of that static member is created which is shared across all instances of the class. It doesn't matter how many times we initialize a class; there will always be only one copy of static field belonging to it. The value of this static field will be shared across all object of either same of any different class. Race condition A race condition occurs when two or more threads can access shared data and they try to change it at the same time. Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are \"racing\" to access/change the data. if (x == 5) // The \"Check\" { y = x * 2; // The \"Act\" // If another thread changed x in between \"if (x == 5)\" and \"y = x * 2\" above, // y will not be equal to 10. } Tips / Usuage Mapper TreeMap By default, TreeMap sorts all its entries according to their natural ordering of key . For an integer, this would mean ascending order and for strings, alphabetical order. TreeMap<String, String> map = new TreeMap<>() If we're not satisfied with the natural ordering of TreeMap, we can also define our own rule for ordering by means of a comparator during construction of a tree map. TreeMap<Integer, String> map = new TreeMap<>(Comparator.reverseOrder()) ObjectMapper Constructing an ObjectMapper instance is a relatively expensive operation, so it's recommended to create one object and reuse it like below. private static final ObjectMapper jsonMapper = new ObjectMapper() Log values as a JSON log.info( \"Log info\", value(\"log_name\", log_name), value(\"log_type\", log_type), value(\"log_variables\", jsonMapper.writeValueAsString(localVariable)) ); Two ways to set PropertyNamingStrategy be SNAKE_CASE spring: jackson: property-naming-strategy: SNAKE_CASE ========================================================== @Configuration public class JacksonConfiguration { @Bean public Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder() { return new Jackson2ObjectMapperBuilder() .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE); // insert other configurations } } Consumer / Supplier / Predicate / Function Predictions A Predicate interface represents a boolean-valued-function of an argument. This is mainly used to filter data from a Java Stream. The filter method of a stream accepts a predicate to filter the data and return a new stream satisfying the predicate. A predicate has a test() method which accepts an argument and returns a boolean value. @Test public void testPredicateAndComposition(){ List<String> names = Arrays.asList(\"John\", \"Smith\", \"Samueal\", \"Catley\", \"Sie\"); Predicate<String> startPredicate = str -> str.startsWith(\"S\"); Predicate<String> lengthPredicate = str -> str.length() >= 5; names.stream().filter(startPredicate.and(lengthPredicate)).forEach(System.out::println); } =================================================== var a = getResponse(StringQueryResponse.class, isBookQueryResponse()) .map(response -> response.value); public static Predicate<StringQueryResponse> isBookQueryResponse() { return response -> response.queryName.equals(isBookQuery.QUERY_NAME); } Consumer A Consumer is a functional interface that accepts a single input and returns no output. Consumer interface has two methods: void accept(T t); default Consumer<T> andThen(Consumer<? super T> after); In the following example, we demonstrate the usage of composing multiple consumer implementations to make a chain of consumers. In this specific example, we have created two consumers; one converts a list of items into upper case Strings and the other one prints the uppercased string. @Test public void whenNamesPresentUseBothConsumer(){ List<String> cities = Arrays.asList(\"Sydney\", \"Dhaka\", \"New York\", \"London\"); Consumer<List<String>> upperCaseConsumer = list -> { for(int i=0; i< list.size(); i++){ list.set(i, list.get(i).toUpperCase()); } }; Consumer<List<String>> printConsumer = list -> list.stream().forEach(System.out::println); upperCaseConsumer.andThen(printConsumer).accept(cities); } Consumer interface has specific implementation types for integer, double and long types with IntConsumer, DoubleConsumer, and LongConsumer as shown below: IntConsumer void accept(int x); DoubleConsumer void accept(double x); LongConsumer void accept(long x); Supplier A Supplier is a simple interface which indicates that this implementation is a supplier of results. The supplier has only one method get() and does not have any other default and static methods. BookCategory category = getDefaultOnException( () -> BookCategory.valueOf(favoriteBook.category().name()), BookCategory.OTHER); private static <R> R getDefaultOnException(final Supplier<R> supplier, final R defaultValue) { try { return supplier.get(); } catch (final IllegalArgumentException | NullPointerException e) { return defaultValue; } } Function A Function interface is more of a generic one that takes one argument and produces a result. This has a Single Abstract Method (SAM) apply which accepts an argument of a type T and produces a result of type R. One of the common use cases of this interface is Stream.map method. This is shown as below: @Test public void testFunctions(){ List<String> names = Arrays.asList(\"Smith\", \"Gourav\", \"Heather\", \"John\", \"Catania\"); Function<String, Integer> nameMappingFunction = String::length; List<Integer> nameLength = names.stream().map(nameMappingFunction).collect(Collectors.toList()); System.out.println(nameLength); } Condition if - else if(x==y) { return a; } else { return b } can be simpified as: x == y ? a : b if - else if - else If the conditions are not based on the same thing, for example: if (condition A) { ... } if (condition B) { ... } If the conditions is based on the same thing, then: if (a > 1) { ... } else if (a == 0) { ... } else { ... } if-else VS switch For a switch statement, the default clause is good for error handling and testing (even it is not necessary). If it doesn't need the default clause, then if - else can be considered instead. try... catch... finally At a basic level catch and finally solve two related but different problems: catch is used to handle a problem that was reported by code you called. finally is used to clean up data/resources that the current code created/modified, no matter if a problem/exception occurred or not The finally block is used for code that must always run, whether an error condition (exception) occurred or not. Care should be taken in the finally block to ensure that it does not itself throw an exception. For example, be doubly sure to check all variables for null, etc. try { // Do processing return result; } finally { // Release resources } static final VS final static static final and final static are the same. However static final is recommended by coding convention. Other Checked / Unchecked assignment Checked assignment: Map<String, Object> factMap = new HashMap<>() Unchecked assignment: Map<String, Object> factMap = new HashMap()","title":"Java"},{"location":"java/#optional","text":"getData(input).isPresent() getData(input).isEmpty() /* Return non-negative value, and when result is null, return 0L */ private long getA(Optional<QueryResponse> response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .orElse(0L); } /* Return non-negative value, when result is null, return result/null */ private long getA(Optional<QueryResponse> response) { return response .map(r -> r.b) .map(b -> Math.max(0, b) .get(); } /* Return the result which A.getB() >= b and sort it out as ascending order by C */ private long getC(Object A) { return A.stream() .filter(A -> A.getB() >= b) .max(Comparator.comparing(A::getC())) .map(A::getC()) .orElse(0L); Boolean/boolean result = (response) -> Optional.ofNullable(response) .map(r -> r.b) .map(b -> b.c) .isPresent()) /* When several functions have common parts, can extract the common method (parseValueFromA) for them */ private Long parseValueFromA(Optional<QueryResponse> response,Function<QueryResponse, Long> function) { return response .map(function) .orElse(null); } Long B = parseValueFromA(response, QueryResponse -> QueryResponse.B); Long C = parseValueFromA(response, QueryResponse -> QueryResponse.C);","title":"Optional"},{"location":"java/#sets-list","text":"Implement containsAny for sets. Sets.intersection(set1, set2).isEmpty() CollectionUtils.containsAny(someCollection1, someCollection2) setA.stream().anyMatch(setB::contains) Implement anyMatch for stream. a.stream().anyMatch(s -> b.trim().equalsIgnoreCase(s)) Converter to a set Set<String> orderedItems = orderedItemsSet.stream() .map(str -> str.replaceAll(\"\\\\s\",\"\")) .map(String::toLowerCase) .collect(Collectors.toSet()) Return empty list/value return empty list var orderLines = Optional.ofNullable(request.getStudents()) .map(Students::getStudents) .orElse(Collections.emptyList()) Return empty value var student = Optional.ofNullable(request.getStudent()).orElse(null)","title":"Sets / List"},{"location":"java/#validator","text":"Validate configuration of YAML file xxxx-config : settings : normal : - level1: 175_00 reward: 510 - level2: 350_00 reward: 530 high : - level1: 175_00 reward: 550 - level2: 350_00 reward: 580 userMppingList : DEFAULT : normal #Default is mandatory to be set USER12345 : high ========================================================================= @Override public boolean supports(@NotNull Class<?> clazz) { return XxxxConfiguration.class.isAssignableFrom(clazz); } @Override public void validate(@NotNull Object target, @NotNull Errors errors) { XxxxConfiguration config = (XxxxConfiguration) target; if (isNull(config.getSettings())) { errors.rejectValue(\"settings\", \"settings\", \"Setting is null\"); } else if (getUserMppingList() == null) { errors.rejectValue(\"userMppingList\", \"userMppingList\", \"userMppingList is null\"); } else if (!config.getSetting().containsKey(getUserMppingList().get(DEFAULT))) { errors.rejectValue(\"settings\", \"settings\", \"Default setting not defined\"); } } Assert Java also provides a second syntax for assertions that takes a string, which will be used to construct the AssertionError if one is thrown: public void setup() { Connection conn = getConnection(); // or assert conn != null; assert conn != null : \"Connection is null\"; }","title":"Validator"},{"location":"java/#exceptions","text":"message throw check def ex = thrown(IllegalArgumentException) ex.message == \"(java.lang.IllegalArgumentException: XXX)","title":"Exceptions"},{"location":"java/#data-fetching-handling","text":"Solution 1 A.getB().getC() Solution 2 Optional.ofNullable(A) .map(A::getB()) .map(B::getC()) .orElseThrow(() -> new RuntimeException(\"C is not present!\"));","title":"Data fetching handling"},{"location":"java/#regexp-restrction-annotation","text":"","title":"Regexp/ restrction annotation"},{"location":"java/#integer","text":"@Positive and @PositiveOrZero @Min(100) and @Max(100) @Range(min = 1000, max = 3000)","title":"Integer"},{"location":"java/#string","text":"@NotEmpty // String is not empty @NotNull // String is not Null @Size(max = 100) // length of String @Pattern(regexp = \"(^[1-9]$)|(^0[1-9]|1[0-2]$)\") // 1 - 12, include 01, 02 @Pattern(regexp = \"^\\d{4}$\") // Four digits @Pattern(regexp = \"[A-Z]{3}\") // The three character ISO 4217 currency code","title":"String"},{"location":"java/#localdate","text":"@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd\")","title":"LocalDate"},{"location":"java/#annotations","text":"@Data @EqualsAndHashCode(callSuper = true) @EqualsAndHashCode is included in @Data, and the default value of callSuper is false. @AvroIgnore @EnableAutoConfiguration Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. When using @SpringBootApplication, the auto-configuration of the context is automatically enabled and adding this annotation has therefore no additional effect. It is generally recommended that you place @EnableAutoConfiguration (if you're not using @SpringBootApplication) in a root package so that all sub-packages and classes can be searched.","title":"Annotations"},{"location":"java/#methods","text":"Boolean.equals(Object obj) Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object. Objects.isNull(Object A) This method is used to check if object is null or not, it doesn't check empty. ObjectUtils.allNotNull(Object A, Object B,....) This method is used to check if all object are not null, it doesn't check empty. StringUtils.isEmpty() This method is used to check if a String object is null or empty . String equals() always return boolean value This method compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object. Otherwise is false. booleanValue = Str1.equals(Str2) org.springframework.util.CollectionUtils.isEmpty(Object A) This method is used to check if a object is null or empty . LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) To format the date. Long.MAX_VALUE Get the maximum value of Long.","title":"Methods"},{"location":"java/#concepts","text":"","title":"Concepts"},{"location":"java/#final","text":"A final variable can only be initialized once, it always contains the same value. If a final variable holds a reference to an object, then the state of the object may be changed by operations on the object, but the variable will always refer to the same object. // A final class cannot be subclassed. public final class MyFinalClass {...} public class ThisIsWrong extends MyFinalClass {...} // forbidden // A final method cannot be overridden or hidden by subclasses public class Base { public void m1() {...} public final void m2() {...} public static void m3() {...} public static final void m4() {...} } public class Derived extends Base { public void m1() {...} // OK, overriding Base#m1() public void m2() {...} // forbidden public static void m3() {...} // OK, hiding Base#m3() public static void m4() {...} // forbidden }","title":"final"},{"location":"java/#static","text":"In the Java programming language, the keyword static indicates that the particular member belongs to a type itself, rather than to an instance of that type. This means that only one instance of that static member is created which is shared across all instances of the class. It doesn't matter how many times we initialize a class; there will always be only one copy of static field belonging to it. The value of this static field will be shared across all object of either same of any different class.","title":"static"},{"location":"java/#race-condition","text":"A race condition occurs when two or more threads can access shared data and they try to change it at the same time. Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are \"racing\" to access/change the data. if (x == 5) // The \"Check\" { y = x * 2; // The \"Act\" // If another thread changed x in between \"if (x == 5)\" and \"y = x * 2\" above, // y will not be equal to 10. }","title":"Race condition"},{"location":"java/#tips-usuage","text":"","title":"Tips / Usuage"},{"location":"java/#mapper","text":"TreeMap By default, TreeMap sorts all its entries according to their natural ordering of key . For an integer, this would mean ascending order and for strings, alphabetical order. TreeMap<String, String> map = new TreeMap<>() If we're not satisfied with the natural ordering of TreeMap, we can also define our own rule for ordering by means of a comparator during construction of a tree map. TreeMap<Integer, String> map = new TreeMap<>(Comparator.reverseOrder())","title":"Mapper"},{"location":"java/#objectmapper","text":"Constructing an ObjectMapper instance is a relatively expensive operation, so it's recommended to create one object and reuse it like below. private static final ObjectMapper jsonMapper = new ObjectMapper() Log values as a JSON log.info( \"Log info\", value(\"log_name\", log_name), value(\"log_type\", log_type), value(\"log_variables\", jsonMapper.writeValueAsString(localVariable)) ); Two ways to set PropertyNamingStrategy be SNAKE_CASE spring: jackson: property-naming-strategy: SNAKE_CASE ========================================================== @Configuration public class JacksonConfiguration { @Bean public Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder() { return new Jackson2ObjectMapperBuilder() .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE); // insert other configurations } }","title":"ObjectMapper"},{"location":"java/#consumer-supplier-predicate-function","text":"Predictions A Predicate interface represents a boolean-valued-function of an argument. This is mainly used to filter data from a Java Stream. The filter method of a stream accepts a predicate to filter the data and return a new stream satisfying the predicate. A predicate has a test() method which accepts an argument and returns a boolean value. @Test public void testPredicateAndComposition(){ List<String> names = Arrays.asList(\"John\", \"Smith\", \"Samueal\", \"Catley\", \"Sie\"); Predicate<String> startPredicate = str -> str.startsWith(\"S\"); Predicate<String> lengthPredicate = str -> str.length() >= 5; names.stream().filter(startPredicate.and(lengthPredicate)).forEach(System.out::println); } =================================================== var a = getResponse(StringQueryResponse.class, isBookQueryResponse()) .map(response -> response.value); public static Predicate<StringQueryResponse> isBookQueryResponse() { return response -> response.queryName.equals(isBookQuery.QUERY_NAME); } Consumer A Consumer is a functional interface that accepts a single input and returns no output. Consumer interface has two methods: void accept(T t); default Consumer<T> andThen(Consumer<? super T> after); In the following example, we demonstrate the usage of composing multiple consumer implementations to make a chain of consumers. In this specific example, we have created two consumers; one converts a list of items into upper case Strings and the other one prints the uppercased string. @Test public void whenNamesPresentUseBothConsumer(){ List<String> cities = Arrays.asList(\"Sydney\", \"Dhaka\", \"New York\", \"London\"); Consumer<List<String>> upperCaseConsumer = list -> { for(int i=0; i< list.size(); i++){ list.set(i, list.get(i).toUpperCase()); } }; Consumer<List<String>> printConsumer = list -> list.stream().forEach(System.out::println); upperCaseConsumer.andThen(printConsumer).accept(cities); } Consumer interface has specific implementation types for integer, double and long types with IntConsumer, DoubleConsumer, and LongConsumer as shown below: IntConsumer void accept(int x); DoubleConsumer void accept(double x); LongConsumer void accept(long x); Supplier A Supplier is a simple interface which indicates that this implementation is a supplier of results. The supplier has only one method get() and does not have any other default and static methods. BookCategory category = getDefaultOnException( () -> BookCategory.valueOf(favoriteBook.category().name()), BookCategory.OTHER); private static <R> R getDefaultOnException(final Supplier<R> supplier, final R defaultValue) { try { return supplier.get(); } catch (final IllegalArgumentException | NullPointerException e) { return defaultValue; } } Function A Function interface is more of a generic one that takes one argument and produces a result. This has a Single Abstract Method (SAM) apply which accepts an argument of a type T and produces a result of type R. One of the common use cases of this interface is Stream.map method. This is shown as below: @Test public void testFunctions(){ List<String> names = Arrays.asList(\"Smith\", \"Gourav\", \"Heather\", \"John\", \"Catania\"); Function<String, Integer> nameMappingFunction = String::length; List<Integer> nameLength = names.stream().map(nameMappingFunction).collect(Collectors.toList()); System.out.println(nameLength); }","title":"Consumer / Supplier / Predicate / Function"},{"location":"java/#condition","text":"if - else if(x==y) { return a; } else { return b } can be simpified as: x == y ? a : b if - else if - else If the conditions are not based on the same thing, for example: if (condition A) { ... } if (condition B) { ... } If the conditions is based on the same thing, then: if (a > 1) { ... } else if (a == 0) { ... } else { ... } if-else VS switch For a switch statement, the default clause is good for error handling and testing (even it is not necessary). If it doesn't need the default clause, then if - else can be considered instead. try... catch... finally At a basic level catch and finally solve two related but different problems: catch is used to handle a problem that was reported by code you called. finally is used to clean up data/resources that the current code created/modified, no matter if a problem/exception occurred or not The finally block is used for code that must always run, whether an error condition (exception) occurred or not. Care should be taken in the finally block to ensure that it does not itself throw an exception. For example, be doubly sure to check all variables for null, etc. try { // Do processing return result; } finally { // Release resources } static final VS final static static final and final static are the same. However static final is recommended by coding convention.","title":"Condition"},{"location":"java/#other","text":"","title":"Other"},{"location":"java/#checked-unchecked-assignment","text":"Checked assignment: Map<String, Object> factMap = new HashMap<>() Unchecked assignment: Map<String, Object> factMap = new HashMap()","title":"Checked / Unchecked assignment"},{"location":"markdown/","text":"Get Started Welcome to Boostnote :) This is a page for you to play around with. \ud83d\udc68\u200d\ud83d\udcbb Markdown Cheat Sheet \ud83d\udc69\u200d\ud83d\udcbb 1\ufe0f\u20e3 Headings Heading 1 # H1 Heading 2 ## H2 Heading 3 ### H3 Heading 4 #### H4 Heading 5 ##### H5 Heading 6 ###### H6 2\ufe0f\u20e3 Text Decoration Bold **bold** Italic *italicized text* Line Through ~~line through~~ 3\ufe0f\u20e3 List Ordered List 1. First Item 2. Second Item 3. Third Item Unordered List * First Item * Second Item * Third Item 4\ufe0f\u20e3 Code Decoration Code code Code Block <title>Hello World!</title> <link rel=\"stylesheet\" href=\"style.css\"> 5\ufe0f\u20e3 Others Checkbox * [x] First Item * [ ] Second item Horizontal Rule --- Link [Boostnote](https://boostnote.io/) Quote > This is a quote from somewhere!","title":"Markdown"},{"location":"markdown/#get-started","text":"Welcome to Boostnote :) This is a page for you to play around with.","title":"Get Started"},{"location":"markdown/#markdown-cheat-sheet","text":"","title":"\ud83d\udc68\u200d\ud83d\udcbb Markdown Cheat Sheet \ud83d\udc69\u200d\ud83d\udcbb"},{"location":"markdown/#1-headings","text":"","title":"1\ufe0f\u20e3 Headings"},{"location":"markdown/#heading-1","text":"# H1","title":"Heading 1"},{"location":"markdown/#heading-2","text":"## H2","title":"Heading 2"},{"location":"markdown/#heading-3","text":"### H3","title":"Heading 3"},{"location":"markdown/#heading-4","text":"#### H4","title":"Heading 4"},{"location":"markdown/#heading-5","text":"##### H5","title":"Heading 5"},{"location":"markdown/#heading-6","text":"###### H6","title":"Heading 6"},{"location":"markdown/#2-text-decoration","text":"","title":"2\ufe0f\u20e3 Text Decoration"},{"location":"markdown/#bold","text":"**bold**","title":"Bold"},{"location":"markdown/#italic","text":"*italicized text*","title":"Italic"},{"location":"markdown/#line-through","text":"~~line through~~","title":"Line Through"},{"location":"markdown/#3-list","text":"","title":"3\ufe0f\u20e3 List"},{"location":"markdown/#ordered-list","text":"1. First Item 2. Second Item 3. Third Item","title":"Ordered List"},{"location":"markdown/#unordered-list","text":"* First Item * Second Item * Third Item","title":"Unordered List"},{"location":"markdown/#4-code-decoration","text":"","title":"4\ufe0f\u20e3 Code Decoration"},{"location":"markdown/#code","text":"code","title":"Code"},{"location":"markdown/#code-block","text":"<title>Hello World!</title> <link rel=\"stylesheet\" href=\"style.css\">","title":"Code Block"},{"location":"markdown/#5-others","text":"","title":"5\ufe0f\u20e3 Others"},{"location":"markdown/#checkbox","text":"* [x] First Item * [ ] Second item","title":"Checkbox"},{"location":"markdown/#horizontal-rule","text":"---","title":"Horizontal Rule"},{"location":"markdown/#link","text":"[Boostnote](https://boostnote.io/)","title":"Link"},{"location":"markdown/#quote","text":"> This is a quote from somewhere!","title":"Quote"},{"location":"photoshop/","text":"Welcome to Molly's note For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Deploy changes mkdocs -h - Print help message and exit.","title":"Photoshop"},{"location":"photoshop/#welcome-to-mollys-note","text":"For full documentation visit mkdocs.org .","title":"Welcome to Molly's note"},{"location":"photoshop/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Deploy changes mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"spring-boot/","text":"Welcome to Spring Boot \u5165\u95e8 Spring \u67b6\u6784 Spring \u6574\u4f53\u67b6\u6784\u56fe AOP (Aspect Oriented Programming) \u9762\u5411\u5207\u9762\u7f16\u7a0b\uff0c\u901a\u8fc7\u9884\u7f16\u8bd1\u65b9\u5f0f\u548c\u8fd0\u884c\u671f\u95f4\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u7684\u7edf\u4e00\u7ef4\u62a4\u7684\u4e00\u79cd\u6280\u672f\u3002 AOP\u662fOOP\u7684\u5ef6\u7eed\uff0c\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u70ed\u70b9\uff0c\u4e5f\u662fSpring\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5185\u5bb9\uff0c\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e00\u79cd\u884d\u751f\u8303\u578b\u3002 Core Container \u5c0f\u77e5\u8bc6: * IoC, Inversion of Control, \u63a7\u5236\u53cd\u8f6c IoC\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e0eDI\u7684\u5173\u7cfb\uff1f - \u4f9d\u8d56\u67e5\u627e(Dependency Lookup)\uff1a\u5bb9\u5668\u4e2d\u7684\u53d7\u63a7\u5bf9\u8c61\u901a\u8fc7\u5bb9\u5668\u7684API\u6765\u67e5\u627e\u81ea\u5df1\u6240\u4f9d\u8d56\u7684\u8d44\u6e90\u548c\u534f\u4f5c\u5bf9\u8c61\u3002\u8fd9\u79cd\u65b9\u5f0f\u867d\u7136\u964d\u4f4e\u4e86\u5bf9\u8c61\u95f4\u7684\u4f9d\u8d56\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u4f7f\u7528\u5230\u4e86\u5bb9\u5668\u7684API\uff0c\u9020\u6210\u4e86\u6211\u4eec\u65e0\u6cd5\u5728\u5bb9\u5668\u5916\u4f7f\u7528\u548c\u6d4b\u8bd5\u5bf9\u8c61\u3002\u4f9d\u8d56\u67e5\u627e\u662f\u4e00\u79cd\u66f4\u52a0\u4f20\u7edf\u7684IoC\u5b9e\u73b0\u65b9\u5f0f\u3002 - \u4f9d\u8d56\u6ce8\u5165(Dependency Injection)\uff1a\u8fd9\u5c31\u662fDI\uff0c\u5b57\u9762\u4e0a\u7406\u89e3\uff0c\u4f9d\u8d56\u6ce8\u5165\u5c31\u662f\u5c06\u670d\u52a1\u6ce8\u5165\u5230\u4f7f\u7528\u5b83\u7684\u5730\u65b9\u3002\u5bf9\u8c61\u53ea\u63d0\u4f9b\u666e\u901a\u7684\u65b9\u6cd5\u8ba9\u5bb9\u5668\u53bb\u51b3\u5b9a\u4f9d\u8d56\u5173\u7cfb\uff0c\u5bb9\u5668\u5168\u6743\u8d1f\u8d23\u7ec4\u4ef6\u7684\u88c5\u914d\uff0c\u5b83\u4f1a\u628a\u7b26\u5408\u4f9d\u8d56\u5173\u7cfb\u7684\u5bf9\u8c61\u901a\u8fc7\u5c5e\u6027\uff08JavaBean\u4e2d\u7684setter\uff09\u6216\u8005\u662f\u6784\u9020\u5b50\u4f20\u9012\u7ed9\u9700\u8981\u7684\u5bf9\u8c61\u3002\u76f8\u5bf9\u4e8eIoC\u800c\u8a00\uff0c\u4f9d\u8d56\u6ce8\u5165(DI)\u66f4\u52a0\u51c6\u786e\u5730\u63cf\u8ff0\u4e86IoC\u7684\u8bbe\u8ba1\u7406\u5ff5\u3002\u6240\u8c13\u4f9d\u8d56\u6ce8\u5165\uff0c\u5373\u7ec4\u4ef6\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u7531\u5bb9\u5668\u5728\u5e94\u7528\u7cfb\u7edf\u8fd0\u884c\u671f\u6765\u51b3\u5b9a\uff0c\u4e5f\u5c31\u662f\u7531\u5bb9\u5668\u52a8\u6001\u5730\u5c06\u67d0\u79cd\u4f9d\u8d56\u5173\u7cfb\u7684\u76ee\u6807\u5bf9\u8c61\u5b9e\u4f8b\u6ce8\u5165\u5230\u5e94\u7528\u7cfb\u7edf\u4e2d\u7684\u5404\u4e2a\u5173\u8054\u7684\u7ec4\u4ef6\u4e4b\u4e2d\u3002 - IoC\u662fSpring\u7684\u6838\u5fc3\uff0c\u8d2f\u7a7f\u59cb\u7ec8\u3002\u5bf9\u4e8eSpring\u6846\u67b6\u6765\u8bf4\uff0c\u5c31\u662f\u7531Spring\u6765\u8d1f\u8d23\u63a7\u5236\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u5bf9\u8c61\u95f4\u7684\u5173\u7cfb\u3002 Spring\u4e2dDI\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f---Setter\u65b9\u5f0f(\u4f20\u503c\u65b9\u5f0f)\u548c\u6784\u9020\u5668\u65b9\u5f0f(\u5f15\u7528\u65b9\u5f0f)\u3002","title":"Spring Boot"},{"location":"spring-boot/#welcome-to-spring-boot","text":"","title":"Welcome to Spring Boot \u5165\u95e8"},{"location":"spring-boot/#spring","text":"Spring \u6574\u4f53\u67b6\u6784\u56fe AOP (Aspect Oriented Programming) \u9762\u5411\u5207\u9762\u7f16\u7a0b\uff0c\u901a\u8fc7\u9884\u7f16\u8bd1\u65b9\u5f0f\u548c\u8fd0\u884c\u671f\u95f4\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u7684\u7edf\u4e00\u7ef4\u62a4\u7684\u4e00\u79cd\u6280\u672f\u3002 AOP\u662fOOP\u7684\u5ef6\u7eed\uff0c\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u70ed\u70b9\uff0c\u4e5f\u662fSpring\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5185\u5bb9\uff0c\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e00\u79cd\u884d\u751f\u8303\u578b\u3002 Core Container \u5c0f\u77e5\u8bc6: * IoC, Inversion of Control, \u63a7\u5236\u53cd\u8f6c IoC\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e0eDI\u7684\u5173\u7cfb\uff1f - \u4f9d\u8d56\u67e5\u627e(Dependency Lookup)\uff1a\u5bb9\u5668\u4e2d\u7684\u53d7\u63a7\u5bf9\u8c61\u901a\u8fc7\u5bb9\u5668\u7684API\u6765\u67e5\u627e\u81ea\u5df1\u6240\u4f9d\u8d56\u7684\u8d44\u6e90\u548c\u534f\u4f5c\u5bf9\u8c61\u3002\u8fd9\u79cd\u65b9\u5f0f\u867d\u7136\u964d\u4f4e\u4e86\u5bf9\u8c61\u95f4\u7684\u4f9d\u8d56\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u4f7f\u7528\u5230\u4e86\u5bb9\u5668\u7684API\uff0c\u9020\u6210\u4e86\u6211\u4eec\u65e0\u6cd5\u5728\u5bb9\u5668\u5916\u4f7f\u7528\u548c\u6d4b\u8bd5\u5bf9\u8c61\u3002\u4f9d\u8d56\u67e5\u627e\u662f\u4e00\u79cd\u66f4\u52a0\u4f20\u7edf\u7684IoC\u5b9e\u73b0\u65b9\u5f0f\u3002 - \u4f9d\u8d56\u6ce8\u5165(Dependency Injection)\uff1a\u8fd9\u5c31\u662fDI\uff0c\u5b57\u9762\u4e0a\u7406\u89e3\uff0c\u4f9d\u8d56\u6ce8\u5165\u5c31\u662f\u5c06\u670d\u52a1\u6ce8\u5165\u5230\u4f7f\u7528\u5b83\u7684\u5730\u65b9\u3002\u5bf9\u8c61\u53ea\u63d0\u4f9b\u666e\u901a\u7684\u65b9\u6cd5\u8ba9\u5bb9\u5668\u53bb\u51b3\u5b9a\u4f9d\u8d56\u5173\u7cfb\uff0c\u5bb9\u5668\u5168\u6743\u8d1f\u8d23\u7ec4\u4ef6\u7684\u88c5\u914d\uff0c\u5b83\u4f1a\u628a\u7b26\u5408\u4f9d\u8d56\u5173\u7cfb\u7684\u5bf9\u8c61\u901a\u8fc7\u5c5e\u6027\uff08JavaBean\u4e2d\u7684setter\uff09\u6216\u8005\u662f\u6784\u9020\u5b50\u4f20\u9012\u7ed9\u9700\u8981\u7684\u5bf9\u8c61\u3002\u76f8\u5bf9\u4e8eIoC\u800c\u8a00\uff0c\u4f9d\u8d56\u6ce8\u5165(DI)\u66f4\u52a0\u51c6\u786e\u5730\u63cf\u8ff0\u4e86IoC\u7684\u8bbe\u8ba1\u7406\u5ff5\u3002\u6240\u8c13\u4f9d\u8d56\u6ce8\u5165\uff0c\u5373\u7ec4\u4ef6\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u7531\u5bb9\u5668\u5728\u5e94\u7528\u7cfb\u7edf\u8fd0\u884c\u671f\u6765\u51b3\u5b9a\uff0c\u4e5f\u5c31\u662f\u7531\u5bb9\u5668\u52a8\u6001\u5730\u5c06\u67d0\u79cd\u4f9d\u8d56\u5173\u7cfb\u7684\u76ee\u6807\u5bf9\u8c61\u5b9e\u4f8b\u6ce8\u5165\u5230\u5e94\u7528\u7cfb\u7edf\u4e2d\u7684\u5404\u4e2a\u5173\u8054\u7684\u7ec4\u4ef6\u4e4b\u4e2d\u3002 - IoC\u662fSpring\u7684\u6838\u5fc3\uff0c\u8d2f\u7a7f\u59cb\u7ec8\u3002\u5bf9\u4e8eSpring\u6846\u67b6\u6765\u8bf4\uff0c\u5c31\u662f\u7531Spring\u6765\u8d1f\u8d23\u63a7\u5236\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u5bf9\u8c61\u95f4\u7684\u5173\u7cfb\u3002 Spring\u4e2dDI\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f---Setter\u65b9\u5f0f(\u4f20\u503c\u65b9\u5f0f)\u548c\u6784\u9020\u5668\u65b9\u5f0f(\u5f15\u7528\u65b9\u5f0f)\u3002","title":"Spring \u67b6\u6784"},{"location":"swedish/","text":"fras \u00e4n s\u00e5 l\u00e4nge: so far","title":"Swedish"},{"location":"swedish/#fras","text":"\u00e4n s\u00e5 l\u00e4nge: so far","title":"fras"}]}